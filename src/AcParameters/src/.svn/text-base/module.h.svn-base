/**********************************************************************

  Aurora for Audacity: A Powerful multiplatform Acoustic calculations 
                       plugin collection
                       
  Acoustical Parameters

  module.h

  Angelo Farina - Simone Campanini

**********************************************************************/

#ifndef __AURORA_ACPARAM_MODULE_H__
#define __AURORA_ACPARAM_MODULE_H__

// from Audacity
#include <Audacity.h>
#include <effects/Effect.h>
#include <WaveTrack.h>

#include <commdefs.h>
#include "acpar.h"


class WaveTrack;

class EffectAcParameters: public Effect 
{

 private:
   AcParameters*        m_pAp;
   AFConfig*            m_pCfg;
   AcParametersExports* m_pDataExport;

   bool                 m_bProcess,
                        m_bAppendDataToFile;

   TArrayOfAPAudioTracks m_aAudioData;

   void AddProcessedTracks();
   void LoadTracks();

 public:
   TArrayOfAPAudioTracks* GetTracksArray() { return &m_aAudioData; }

   void SetAppendDataToFile(const bool bValue) { m_bAppendDataToFile = bValue; }

   // ---------------- Standard Audacity Effects' methods ----------------
   
   virtual wxString GetEffectName() {
#ifdef __WXDEBUG__
      return wxString(wxT("Aurora Acoustical Parameters (debug)..."));
#else
      return wxString(_("Aurora Acoustical Parameters..."));
#endif
   }

   virtual wxString GetEffectIdentifier() {
      return wxString(_("AuroraAcParam"));
   }

   virtual wxString GetEffectAction() {
      return wxString(_("Aurora Acoustical Parameters Evaluation"));
   }

   virtual std::set<wxString> GetEffectCategories() {
      std::set<wxString> result;
      result.insert(wxT("http://lv2plug.in/ns/lv2core#AnalyserPlugin"));
      //      result.insert(wxT("http://audacityteam.org/namespace#AnalyzerPlugin"));
      return result;
   }

   virtual int GetEffectFlags() {
      return BUILTIN_EFFECT | ANALYZE_EFFECT;
   }   

   // Useful only after PromptUser values have been set. --------------
   //   virtual wxString GetEffectDescription(); 

   virtual bool Init();
   virtual bool PromptUser();
//   virtual bool TransferParameters( Shuttle & shuttle );

 protected:
   virtual bool Process();
   virtual void End();
 
 public:
    EffectAcParameters();
//   ~EffectAcParameters();

};


#endif // __AURORA_ACPARAM_MODULE_H__

// Indentation settings for Vim and Emacs and unique identifier for Arch, a
// version control system. Please do not modify past this point.
//
// Local Variables:
// c-basic-offset: 3
// indent-tabs-mode: nil
// End:
//
// vim: et sts=3 sw=3
// arch-tag: c05d7383-e7cd-410e-b7b8-f45f47c9e283

